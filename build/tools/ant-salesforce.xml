<!-- TODO: Review Ant v1.8 local properties -->
<project xmlns:sf="antlib:com.salesforce">

	<!--  Download from Salesforce Tools page under Setup -->
	<typedef
		uri="antlib:com.salesforce"
		resource="com/salesforce/antlib.xml"
		classpath="${basedir}/tools/ant-salesforce.jar"/>

	<!--  Download from http://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ -->
	<taskdef
		resource="net/sf/antcontrib/antlib.xml"
		classpath="${basedir}/tools/ant-contrib-1.0b3.jar"
		/>

	<!-- Download from https://code.google.com/p/missing-link/ -->
	<taskdef
		name="http"
		classname="org.missinglink.ant.task.http.HttpClientTask"
		classpath="${basedir}/tools/ml-ant-http-1.1.3.jar"/>

	<!-- Download from http://www.oopsconsultancy.com/software/xmltask/ -->
	<taskdef
		name="xmltask"
		classname="com.oopsconsultancy.xmltask.ant.XmlTask"
		classpath="${basedir}/tools/xmltask.jar"/>

	<!-- Provides access to the Salesforce Tooling REST  API ExecuteAnnoynmous resource -->
	<macrodef name="executeApex" description="Provides access to the Salesforce Tooling REST API ExecuteAnnoynmous resource">
		<attribute name="username" description="Salesforce user name"/>
		<attribute name="password" description="Salesforce password"/>
		<attribute name="serverurl" description="Server url"/>
		<attribute name="resultprefix" description="Property name prefix used for properties containing response data" default="executeAnonymousResponse"/>
		<attribute name="failonerror" description="If the execute fails then fail the Ant script" default="true"/>
		<text name="apexcode"/>
		<sequential>
			<!-- Login -->
			<login username="@{username}" password="@{password}" serverurl="@{serverurl}" sessionId="sessionId" domainurl="domainUrl"/>

			<echo message="Target Domain URL : ${domainUrl}"/>

			<!-- Execute Apex via Tooling API /executeAnonymous resource -->
		    <http url="https://${domainUrl}/services/data/v32.0/tooling/executeAnonymous" method="GET" entityProperty="executeAnonymousResponse" statusProperty="loginResponseStatus" printrequestheaders="false" printresponseheaders="false">
		    	<headers>
		    		<header name="Authorization" value="Bearer ${sessionId}"/>
		    	</headers>
		    	<query>
		    		<parameter name="anonymousBody" value="@{apexcode}"/>
		    	</query>
		    </http>
			<!-- Parse JSON response and set properites -->
			<script language="javascript">
				var response = eval('('+project.getProperty('executeAnonymousResponse')+')');
				for(field in response){
					project.setProperty('@{resultprefix}.' + field, response[field]);
				}
			</script>
			<!-- Fail on error?-->
			<if>
				<and>
					<equals arg1="@{failonerror}" arg2="true"/>
					<equals arg1="${@{resultprefix}.success}" arg2="false"/>
				</and>
				<then>
					<if>
						<equals arg1="${@{resultprefix}.compiled}" arg2="false"/>
						<then>
							<fail message="${@{resultprefix}.line}:${@{resultprefix}.column} ${@{resultprefix}.compileProblem}"/>
						</then>
						<else>
							<fail message="${@{resultprefix}.exceptionMessage} ${@{resultprefix}.exceptionStackTrace}"/>
						</else>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- Login into Salesforce and return the session Id and serverUrl -->
	<macrodef name="login">
		<attribute name="username" description="Salesforce user name."/>
		<attribute name="password" description="Salesforce password."/>
		<attribute name="serverurl" description="Server Url property." default="https://login.salesforce.com"/>
		<attribute name="sessionId" description="Session Id property."/>
		<attribute name="domainurl" description="Domain URL property" />
		<sequential>
			<!-- Obtain Session Id via Login SOAP service -->
		    <http url="@{serverurl}/services/Soap/c/32.0" method="POST" failonunexpected="false" entityProperty="loginResponse" statusProperty="loginResponseStatus" >
		    	<headers>
		    		<header name="Content-Type" value="text/xml"/>
		    		<header name="SOAPAction" value="login"/>
		    	</headers>
		    	<entity>
		    		<![CDATA[
				    	<env:Envelope xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:env='http://schemas.xmlsoap.org/soap/envelope/'>
				    	    <env:Body>
				    	        <sf:login xmlns:sf='urn:enterprise.soap.sforce.com'>
				    	            <sf:username>@{username}</sf:username>
				    	            <sf:password>@{password}</sf:password>
				    	        </sf:login>
				    	    </env:Body>
				    	</env:Envelope>
		    		]]>
		    	</entity>
		    </http>
			<!-- Parse response -->
			<xmltask destbuffer="loginResponseBuffer">
				<insert path="/">${loginResponse}</insert>
			</xmltask>
			<if>
				<!-- Success? -->
				<equals arg1="${loginResponseStatus}" arg2="200"/>
				<then>
					<!-- Parse sessionId and serverUrl -->
					<xmltask sourcebuffer="loginResponseBuffer" failWithoutMatch="true">
						<copy path="/*[local-name()='Envelope']/*[local-name()='Body']/:loginResponse/:result/:sessionId/text()" property="@{sessionId}"/>
						<copy path="/*[local-name()='Envelope']/*[local-name()='Body']/:loginResponse/:result/:serverUrl/text()" property="domainurl"/>
					</xmltask>
					<propertyregex property="@{domainurl}"
		              input="${domainurl}"
		              regexp="(https)://([^/\r\n]+)(/[^\r\n]*)?"
		              select="\2"
		              casesensitive="false" />
				</then>
				<else>
					<!-- Parse login error message and fail build -->
					<xmltask sourcebuffer="loginResponseBuffer" failWithoutMatch="true">
						<copy path="/*[local-name()='Envelope']/*[local-name()='Body']/*[local-name()='Fault']/*[local-name()='faultstring']/text()" property="faultString"/>
					</xmltask>
					<fail message="${faultString}"/>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- Base64 encode a files data -->
	<macrodef name="base64encode">
		<attribute name="file" description="File to base 64 encode."/>
		<attribute name="base64" description="Property to store the base 64 encoded data."/>
		<sequential>
			<loadfile property="filedata" srcFile="@{file}"/>
			<script language="javascript">
				importClass(javax.xml.bind.DatatypeConverter);
				project.setProperty('@{base64}',
					DatatypeConverter.printBase64Binary(
						new java.lang.String(project.getProperty('filedata')).getBytes("UTF-8")));
			</script>
		</sequential>
	</macrodef>

	<!-- Builds a tmp package based on specific attributes and deploying it to the targe org -->
	<macrodef name="deploy-subset-package">
		<element name="ss-elements"/>
		<sequential>
			<delete dir="${app.deploy.tmp.dir}"/>
			<!-- Begin the package xml definition -->
			<echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<Package xmlns="http://soap.sforce.com/2006/04/metadata">]]></echo>
			<!-- Add metadata to package xml from subset elements -->
			<ss-elements/>
			<!-- End the package xml definition -->
			<echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<version>${sf.package.apiVersion}</version></Package>]]></echo>
			<antcall target="deploy-subset"/>
			<delete dir="${app.deploy.tmp.dir}"/>
		</sequential>
	</macrodef>

	<!-- Builds a tmp package based on specific attributes for retrieval purposes-->
	<macrodef name="retrieve-unpackaged-subset-package">
		<element name="ss-elements"/>
		<sequential>
			<delete dir="${app.deploy.tmp.dir}"/>
			<copy file="${src.dir}/package.xml" tofile="${app.deploy.tmp.dir}/app-package.xml" overwrite="true" />
			<!-- Begin the package xml definition -->
			<echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<Package xmlns="http://soap.sforce.com/2006/04/metadata">]]></echo>
			<!-- Add metadata to package xml from subset elements -->
			<ss-elements/>
			<!-- End the package xml definition -->
			<echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<version>${sf.package.apiVersion}</version></Package>]]></echo>
			<antcall target="retrieve-unpackaged-subset"/>
			<copy file="${app.deploy.tmp.dir}/app-package.xml" tofile="${src.dir}/package.xml" overwrite="true"/>
			<delete dir="${app.deploy.tmp.dir}"/>
		</sequential>
	</macrodef>

	<!-- Returns a single record from the specified SOQL Query -->
	<macrodef name="executeSOQLSingle" description="Returns a single record from a SOQL Query">
		<attribute name="username" description="Salesforce user name"/>
		<attribute name="password" description="Salesforce password"/>
		<attribute name="serverurl" description="Server url"/>
		<attribute name="resultprefix" description="Property name prefix used for properties containing response data" default="soqlRecord"/>
		<attribute name="failonerror" description="If the execute fails then fail the Ant script" default="true"/>
		<text name="soqlQuery"/>
		<sequential>
			<!-- Change log levels for this task -->
			<script language="javascript">
				var logger = project.getBuildListeners().firstElement();
        		logger.setMessageOutputLevel(1);
			</script>
			<!-- Login -->
			<echo message="Sever URL : @{serverurl}"/>
			<login username="@{username}" password="@{password}" serverurl="@{serverurl}" sessionId="sessionId" domainurl="domainUrl"/>

			<echo message="Target Domain URL : ${domainUrl}"/>

			<!-- Execute Apex via Tooling API /executeAnonymous resource -->
		    <http url="https://${domainUrl}/services/data/v32.0/query" method="GET" entityProperty="soqlResult" statusProperty="loginResponseStatus" failonunexpected="false" printrequestheaders="false" printresponseheaders="false">
		    	<headers>
		    		<header name="Authorization" value="Bearer ${sessionId}"/>
		    	</headers>
		    	<query>
		    		<parameter name="q" value="@{soqlQuery}"/>
		    	</query>
		    </http>
			<!-- Reset log levels for this task -->
			<script language="javascript">
				var logger = project.getBuildListeners().firstElement();
        		logger.setMessageOutputLevel(2);
			</script>
			<!-- Parse JSON response and set properites -->
			<script language="javascript"><![CDATA[
				var response = eval('('+project.getProperty('soqlResult')+')');
				if(response['records'] && response['records'].length > 0){
					var singleRecord = response['records'][0];
					project.setProperty('@{resultprefix}.success',true);
					for(field in singleRecord){
						project.setProperty('@{resultprefix}.' + field, singleRecord[field]);
					}
				}else{
					project.setProperty('@{resultprefix}.message', response[0]['message']);
					project.setProperty('@{resultprefix}.success',false);
				}
			]]></script>
			<!-- Fail on error?-->
			<if>
				<and>
					<equals arg1="@{failonerror}" arg2="true"/>
					<equals arg1="${@{resultprefix}.success}" arg2="false"/>
				</and>
				<then>
					<fail message="${@{resultprefix}.message}"/>
				</then>
			</if>
		</sequential>
	</macrodef>

</project>
